<%- include('../layouts/header', { pageStyles: '/css/dashboard.css' }) %>

  <style>
    /* Dashboard styles (timeline/tweet styles removed) */
    
  </style>

  <div class="container-fluid">
    <div class="row">
      <!-- Sidebar -->
      <%- include('../layouts/sidebar', { user: user }) %>
        <!-- Main -->
        <div class="col-md-9 offset-md-3">
          <!-- 固定搜索框 -->
          <div class="search-container fixed-top"
            style="top: 0; left: 25%; right: 0; z-index: 1000; background-color: #15202b; padding: 15px; border-bottom: 1px solid #38444d;">
            <div class="search-box">
              <div class="input-group">
                <input type="text" class="form-control" placeholder="Search posts, users, or topics..." id="search-input">
                <button class="btn btn-twitter" type="button" id="search-btn">
                  <i class="fas fa-search me-1"></i>Search
                </button>
              </div>
            </div>
    </div>
  </div>

    <!-- Spacer that matches the fixed header/search height so content is not hidden -->
    <div id="header-spacer" style="width:100%;height:0;display:block;"></div>

    <!-- Compose Tweet Module -->
    <div class="container mt-3">
      <div class="row">
        <div class="col-md-8 offset-md-2">
          <div class="twitter-card p-3 mb-3">
            <form action="/tweet" method="POST" id="compose-form">
              <div class="mb-2">
                <textarea name="content" id="compose-content" class="form-control" rows="3" maxlength="280" placeholder="What's happening?" required></textarea>
              </div>
              <div class="d-flex justify-content-between align-items-center">
                <div>
                  <select name="category" id="compose-category" class="form-select form-select-sm">
                    <option value="general">General</option>
                    <option value="sports">Sports</option>
                    <option value="politics">Politics</option>
                    <option value="entertainment">Entertainment</option>
                  </select>
                </div>
                <div>
                  <button type="submit" class="btn btn-twitter">Post</button>
                </div>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>

  <!-- Timeline / Tweets Section -->
  <div class="container mt-5">
    <div class="row">
      <div class="col-md-8 offset-md-2">
        <ul id="tweets-container" class="list-unstyled">
          <% if (Array.isArray(tweets) && tweets.length > 0) { %>
            <% tweets.forEach(function(tweet) { %>
              <li class="timeline-item mb-3" data-tweet-id="<%= tweet._id %>">
                <div class="tweet-card p-3 rounded shadow-sm">
                  <div class="tweet-header mb-2 d-flex justify-content-between">
                    <div>
                      <strong class="text-white"><%= tweet.authorName %></strong>
                      <span class="text-muted ms-2">@<%= (tweet.authorName || '').toLowerCase().replace(/\s+/g, '') %></span>
                    </div>
                    <small class="text-muted"><i class="fas fa-clock me-1"></i><%= new Date(tweet.createdAt).toLocaleString() %></small>
                  </div>
                  <div class="tweet-content mb-2 text-light"><%= tweet.content %></div>
                  <div class="d-flex align-items-center">
                    <button class="btn btn-sm btn-like me-2 <%= tweet.isLikedByCurrentUser ? 'liked' : '' %>" data-tweet-id="<%= tweet._id %>"><i class="fas fa-heart"></i> <span class="likes-count"><%= tweet.likesCount || 0 %></span></button>
                  </div>
                  <div class="comments-list mt-3">
                    <% if (tweet.comments && tweet.comments.length > 0) { %>
                      <% tweet.comments.slice(-3).forEach(function(c) { %>
                        <div class="comment mb-2">
                          <strong class="text-white"><%= c.authorName %></strong>
                          <span class="text-muted ms-2"><%= new Date(c.createdAt).toLocaleString() %></span>
                          <p class="text-light mb-1"><%= c.content %></p>
                        </div>
                      <% }); %>
                    <% } %>
                    <form class="comment-form d-flex mt-2" data-tweet-id="<%= tweet._id %>">
                      <input type="text" name="content" class="form-control form-control-sm me-2" placeholder="Write a comment..." required maxlength="1000">
                      <button type="submit" class="btn btn-sm btn-twitter">Reply</button>
                    </form>
                  </div>
                </div>
              </li>
            <% }); %>
          <% } else { %>
            <li class="text-center py-5">
              <p class="text-muted">No posts yet. Be the first to post!</p>
            </li>
          <% } %>
        </ul>

        <div id="load-more-container" class="text-center my-3">
          <button id="load-more-btn" class="btn btn-outline-twitter">Load more</button>
        </div>

        <div id="no-more-tweets" class="text-center text-muted" style="display:none">No more posts</div>
      </div>
    </div>
  </div>

  <script>
    function showUserInfo() {
      alert('User info:\nName: <%= user.name %>\nUsername: @<%= user.username %>\nEmail: <%= user.email %>');
    }

    // Timeline and tweet interactions removed to prevent runtime errors.
    function loadMoreTweets() { /* no-op */ }


    // 搜索功能
    async function performSearch() {
      const searchTerm = document.getElementById('search-input').value.trim();
      if (!searchTerm) {
        alert('Please enter a search keyword');
        return;
      }

      try {
        // 显示搜索状态
        const searchBtn = document.getElementById('search-btn');
        const originalText = searchBtn.innerHTML;
        searchBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Searching...';
        searchBtn.disabled = true;

        // 发送搜索请求
  const response = await fetch(`/api/search?q=${encodeURIComponent(searchTerm)}`, { credentials: 'same-origin' });
        const data = await response.json();

        if (data.error) {
          alert('Search failed: ' + data.error);
          return;
        }

        // 显示搜索结果
        displaySearchResults(data.tweets, data.query);

      } catch (error) {
        console.error('Search error:', error);
        alert('Search failed. Please try again.');
      } finally {
        // 恢复按钮状态
        const searchBtn = document.getElementById('search-btn');
        searchBtn.innerHTML = '<i class="fas fa-search me-1"></i>Search';
        searchBtn.disabled = false;
      }
    }

    // 显示搜索结果
    function displaySearchResults(tweets, query) {
      const tweetsContainer = document.getElementById('tweets-container');
      const loadMoreContainer = document.getElementById('load-more-container');
      const noMoreTweets = document.getElementById('no-more-tweets');

      // 隐藏Welcome、Profile和Compose部分
      const welcomeSection = document.querySelector('.twitter-card:first-of-type');
      const profileSection = document.querySelector('.twitter-card:nth-of-type(2)');
      const composeSection = document.querySelector('.twitter-card:nth-of-type(3)');

      if (welcomeSection) welcomeSection.style.display = 'none';
      if (profileSection) profileSection.style.display = 'none';
      if (composeSection) composeSection.style.display = 'none';

      // 隐藏加载更多按钮
      loadMoreContainer.style.display = 'none';
      noMoreTweets.style.display = 'none';

      if (tweets.length === 0) {
        tweetsContainer.innerHTML = `
        <li class="text-center py-5" style="background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%); border: 1px solid #38444d; border-radius: 12px;">
          <i class="fas fa-search fa-3x mb-3 text-light"></i>
          <p class="text-light">No posts found for "${query}"</p>
          <p class="text-muted">Try different keywords</p>
        </li>
      `;
      } else {
        // Display search results (simplified)
        tweetsContainer.innerHTML = `
        <div class="mb-3 p-3 rounded" style="background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%); border: 1px solid #38444d;">
          <h5 class="text-white"><i class="fas fa-search me-2"></i>Search Results for "${query}"</h5>
          <p class="mb-0 text-light">Found ${tweets.length} post(s)</p>
        </div>
      `;

        tweets.forEach(tweet => {
          const li = document.createElement('li');
          li.className = 'timeline-item';
          li.innerHTML = `
            <div class="tweet-card mb-3 p-3 bg-light border rounded shadow-sm">
              <div class="tweet-header mb-2">
                <strong class="text-white">${tweet.authorName}</strong>
                <span class="text-muted ms-2">@${tweet.authorName.toLowerCase().replace(/\s+/g, '')}</span>
              </div>
              <div class="tweet-content">
                <p class="text-light mb-0">${highlightSearchTerm(tweet.content, query)}</p>
              </div>
            </div>
          `;
          tweetsContainer.appendChild(li);
        });

        // Add simple back button
        const returnLi = document.createElement('li');
        returnLi.className = 'text-center mt-4';
        returnLi.innerHTML = `
        <button class="btn btn-outline-twitter" onclick="returnToTimeline()">
          <i class="fas fa-arrow-left me-2"></i>Back
        </button>
      `;
        tweetsContainer.appendChild(returnLi);
      }
    }

    // 高亮搜索关键词
    function highlightSearchTerm(text, query) {
      const regex = new RegExp(`(${query})`, 'gi');
      return text.replace(regex, '<mark class="search-highlight">$1</mark>');
    }

    // Return to timeline (no-op in this build)
    function returnToTimeline() {
      location.reload();
    }

    // 绑定搜索按钮点击事件
    document.getElementById('search-btn').addEventListener('click', performSearch);

    // 绑定回车键搜索
    document.getElementById('search-input').addEventListener('keypress', function (e) {
      if (e.key === 'Enter') {
        performSearch();
      }
    });

    // 点赞按钮处理（事件代理）
    document.addEventListener('click', async function (e) {
      const likeBtn = e.target.closest('.btn-like');
      if (!likeBtn) return;

      const tweetId = likeBtn.getAttribute('data-tweet-id');
      if (!tweetId) return;

      try {
        likeBtn.disabled = true;
  const resp = await fetch(`/like/${tweetId}`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, credentials: 'same-origin' });
        const data = await resp.json();
        if (data && data.ok) {
          const likesCountSpan = likeBtn.querySelector('.likes-count');
          likesCountSpan.textContent = data.likesCount;
          if (data.action === 'liked') {
            likeBtn.classList.add('liked');
          } else {
            likeBtn.classList.remove('liked');
          }
        } else if (data && data.error) {
          alert('Error: ' + data.error);
        }
      } catch (err) {
        console.error('Like action failed', err);
        alert('Like failed.');
      } finally {
        likeBtn.disabled = false;
      }
    });

    // 评论表单提交（事件代理）
    document.addEventListener('submit', async function (e) {
      const form = e.target.closest('.comment-form');
      if (!form) return;
      e.preventDefault();

      const tweetId = form.getAttribute('data-tweet-id');
      const input = form.querySelector('input[name="content"]');
      if (!input) return;
      const content = input.value.trim();
      if (!content) return;

      try {
        const submitBtn = form.querySelector('button[type="submit"]');
        submitBtn.disabled = true;

        const resp = await fetch(`/comment/${tweetId}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'same-origin',
          body: JSON.stringify({ content })
        });

        const data = await resp.json();
        if (data && data.ok && data.comment) {
          // Locate the closest comments list container (form may be nested inside it)
          let commentsList = form.closest('.comments-list');
          if (!commentsList) commentsList = form.parentElement && form.parentElement.classList && form.parentElement.classList.contains('comments-list') ? form.parentElement : null;
          // Fallback: try to find a sibling .comments-list
          if (!commentsList) commentsList = form.parentElement ? form.parentElement.querySelector('.comments-list') : null;
          const div = document.createElement('div');
          div.className = 'comment mb-2';
          div.innerHTML = `<strong class="text-white">${data.comment.authorName}</strong> <span class="text-muted ms-2">${new Date(data.comment.createdAt).toLocaleString()}</span><p class="text-light mb-1">${data.comment.content}</p>`;
          if (commentsList) {
            commentsList.appendChild(div);
          } else {
            // if we can't find comments container, append after the form
            form.insertAdjacentElement('beforebegin', div);
          }
          input.value = '';
        } else if (data && data.error) {
          alert('Error: ' + data.error);
        }
      } catch (err) {
        console.error('Comment failed', err);
        alert('Comment failed.');
      } finally {
        const submitBtn = form.querySelector('button[type="submit"]');
        if (submitBtn) submitBtn.disabled = false;
      }
    });

    // Load more tweets (pagination)
    let tweetsPage = 1;
    const loadMoreBtn = document.getElementById('load-more-btn');
    if (loadMoreBtn) {
      loadMoreBtn.addEventListener('click', async function () {
        tweetsPage += 1;
        loadMoreBtn.disabled = true;
        try {
          const resp = await fetch(`/api/tweets?page=${tweetsPage}&limit=10`, { credentials: 'same-origin' });
          const data = await resp.json();
          if (data && Array.isArray(data.tweets) && data.tweets.length > 0) {
            const container = document.getElementById('tweets-container');
            data.tweets.forEach(tweet => {
              const li = document.createElement('li');
              li.className = 'timeline-item mb-3';
              li.setAttribute('data-tweet-id', tweet._id);
              li.innerHTML = `
                <div class="tweet-card p-3 rounded shadow-sm">
                  <div class="tweet-header mb-2 d-flex justify-content-between">
                    <div>
                      <strong class="text-white">${tweet.authorName}</strong>
                      <span class="text-muted ms-2">@${(tweet.authorName || '').toLowerCase().replace(/\s+/g, '')}</span>
                    </div>
                    <small class="text-muted"><i class="fas fa-clock me-1"></i>${new Date(tweet.createdAt).toLocaleString()}</small>
                  </div>
                  <div class="tweet-content mb-2 text-light">${tweet.content}</div>
                  <div class="d-flex align-items-center">
                    <button class="btn btn-sm btn-like me-2 ${tweet.isLikedByCurrentUser ? 'liked' : ''}" data-tweet-id="${tweet._id}"><i class="fas fa-heart"></i> <span class="likes-count">${tweet.likesCount || 0}</span></button>
                  </div>
                  <div class="comments-list mt-3">
                    ${tweet.comments && tweet.comments.length > 0 ? tweet.comments.slice(-3).map(c => `
                      <div class="comment mb-2">
                        <strong class="text-white">${c.authorName}</strong>
                        <span class="text-muted ms-2">${new Date(c.createdAt).toLocaleString()}</span>
                        <p class="text-light mb-1">${c.content}</p>
                      </div>
                    `).join('') : ''}
                    <form class="comment-form d-flex mt-2" data-tweet-id="${tweet._id}">
                      <input type="text" name="content" class="form-control form-control-sm me-2" placeholder="Write a comment..." required maxlength="1000">
                      <button type="submit" class="btn btn-sm btn-twitter">Reply</button>
                    </form>
                  </div>
                </div>
              `;
              container.appendChild(li);
            });

            if (!data.hasMore) {
              document.getElementById('no-more-tweets').style.display = 'block';
              loadMoreBtn.style.display = 'none';
            }
          } else {
            document.getElementById('no-more-tweets').style.display = 'block';
            loadMoreBtn.style.display = 'none';
          }
        } catch (err) {
          console.error('Load more failed', err);
          alert('Failed to load more posts');
        } finally {
          loadMoreBtn.disabled = false;
        }
      });
    }

    // Adjust tweets container top offset to account for fixed header area
    function adjustTimelineOffset() {
      try {
        const headerElem = document.querySelector('body > div > div > div.col-md-9.offset-md-3 > div');
        const spacer = document.getElementById('header-spacer');
        if (!spacer) return;
        const height = headerElem ? headerElem.getBoundingClientRect().height : 0;
        // Set spacer height so content below moves down and isn't obscured by fixed header/search
        spacer.style.height = (height + 12) + 'px';
      } catch (err) {
        console.error('Adjust timeline offset failed', err);
      }
    }

    window.addEventListener('load', adjustTimelineOffset);
    window.addEventListener('resize', adjustTimelineOffset);
    // also call once immediately
    adjustTimelineOffset();

    // AJAX submit for compose form
    (function () {
      const composeForm = document.getElementById('compose-form');
      if (!composeForm) return;

      composeForm.addEventListener('submit', async function (e) {
        e.preventDefault();
        const contentEl = document.getElementById('compose-content');
        const categoryEl = document.getElementById('compose-category');
        if (!contentEl) return;
        const content = contentEl.value.trim();
        const category = categoryEl ? categoryEl.value : 'general';
        if (!content) return alert('Please write something before posting.');

        const submitBtn = composeForm.querySelector('button[type="submit"]');
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Posting...';

        try {
          const resp = await fetch('/tweet', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
            credentials: 'same-origin',
            body: JSON.stringify({ content, category })
          });
          const data = await resp.json();
          if (data && data.ok && data.tweet) {
            // build DOM for new tweet and prepend
            const container = document.getElementById('tweets-container');
            const li = document.createElement('li');
            li.className = 'timeline-item mb-3';
            li.setAttribute('data-tweet-id', data.tweet._id);
            li.innerHTML = `
              <div class="tweet-card p-3 rounded shadow-sm">
                <div class="tweet-header mb-2 d-flex justify-content-between">
                  <div>
                    <strong class="text-white">${data.tweet.authorName}</strong>
                    <span class="text-muted ms-2">@${(data.tweet.authorName || '').toLowerCase().replace(/\s+/g, '')}</span>
                  </div>
                  <small class="text-muted"><i class="fas fa-clock me-1"></i>${new Date(data.tweet.createdAt).toLocaleString()}</small>
                </div>
                <div class="tweet-content mb-2 text-light">${data.tweet.content}</div>
                <div class="d-flex align-items-center">
                  <button class="btn btn-sm btn-like me-2" data-tweet-id="${data.tweet._id}"><i class="fas fa-heart"></i> <span class="likes-count">0</span></button>
                </div>
                <div class="comments-list mt-3">
                  <form class="comment-form d-flex mt-2" data-tweet-id="${data.tweet._id}">
                    <input type="text" name="content" class="form-control form-control-sm me-2" placeholder="Write a comment..." required maxlength="1000">
                    <button type="submit" class="btn btn-sm btn-twitter">Reply</button>
                  </form>
                </div>
              </div>
            `;
            if (container.firstChild) container.insertBefore(li, container.firstChild);
            else container.appendChild(li);

            // clear compose
            contentEl.value = '';
            categoryEl.value = 'general';
            adjustTimelineOffset();
          } else if (data && data.error) {
            alert('Error: ' + data.error);
          }
        } catch (err) {
          console.error('Post failed', err);
          alert('Failed to post.');
        } finally {
          submitBtn.disabled = false;
          submitBtn.innerHTML = 'Post';
        }
      });
    })();

  </script>

  <%- include('../layouts/footer') %>

  <!-- MetaMask client script (ensure Link/Unlink buttons work on dashboard) -->
  <script src="/js/metamask.js"></script>